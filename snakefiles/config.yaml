---
paths:
    # path to Admixture_Simulate.py
    #msprime_script: "/Genomics/grid/users/abwolf/SimulatedDemographic/msprime/bin/src/Admixture_Simulation.py"
    msprime_script: "/Genomics/grid/users/tcomi/msprime_scripts/src/Admixture_Simulation.py"
    # path to sstar windowed calulation directory (Ben's bin)
    sstar_dir: "/Genomics/grid/users/abwolf/SimulatedDemographic/Sstar/s_star_git"
    vcftools_bin: "/usr/local/bin/vcftools"
    bedops: "/usr/local/bin/"

    popfile: "__BASE_OUTPUT__/base.popfile"
    bedfile: "__BASE_OUTPUT__/{directory}/TreeCalls/{seed}.bed.merged.gz"
    combined_bed: "__BASE_OUTPUT__/{directory}/TreeCalls/All.bed.gz"
    haplotype_map: "__BASE_OUTPUT__/{directory}/haplotype_to_sample.txt"
    window_calc: "__BASE_OUTPUT__/{directory}/RegionFiles/{seed}.windowcalc.gz"
    chr_list: "__BASE_OUTPUT__/{directory}/{model}.chr_list"
    options: "__BASE_OUTPUT__/{directory}/options.txt"
    raw_vcf: "__BASE_OUTPUT__/{directory}/vcfs/{seed,\\d+}.vcf.gz"
    mod_vcf: "__BASE_OUTPUT__/{directory}/vcfs/{seed}.mod.vcf.gz"
    mod_tbi: "__BASE_OUTPUT__/{directory}/vcfs/{seed}.mod.vcf.gz.tbi"
    arch_vcf: "__BASE_OUTPUT__/{directory}/vcfs/{seed}.mod.ARCHAIC.vcf.gz"
    arch_tbi: "__BASE_OUTPUT__/{directory}/vcfs/{seed}.mod.ARCHAIC.vcf.gz.tbi"
    match_counts: "__BASE_OUTPUT__/{directory}/match_pct/\
                   {seed}_match_counts.tsv"
    null_db: "__NULL_DIR__/match_pct/match_percent.db"
    pvalue_table: "__BASE_OUTPUT__/{directory}/match_pct/{seed}.tsv.gz"
    split_chrom_dir: "__NULL_DIR__/split_db"
    split_chrom: "__SPLIT_CHROM_DIR__/chrom_{part}"
    split_null_db: "__NULL_DIR__/null_db_{part}.pkl"
    ecdf_data: "__NULL_DIR__/null_db.pkl"
    ecdf_bed_dir: "__ADMIXED_DIR__/bedfiles"
    ecdf_bed_files: "__ECDF_BED_DIR__/{seed}.sstar_sig_{sstarpvalue}\
                     .match_sig_N_{matchpvalue}.isc_0.bed"
    ecdf_bed_merge: "__ECDF_BED_DIR__/{seed}.sstar_sig_{sstarpvalue}\
                     .match_sig_N_{matchpvalue}.isc_0.bed.merged.gz"
    ecdf_bed_merge_pop: "__ECDF_BED_DIR__/{seed}.sstar_sig_{sstarpvalue}\
                         .match_sig_N_{matchpvalue}\
                         .isc_0.bed.merged_{population}.gz"

    sstar_out: "__ADMIXED_DIR__/admixture_Sstar.txt"
    pi: "__ADMIXED_DIR__/vcfs/pi_{seed}.txt"
    pi_joined: "__ADMIXED_DIR__/pi.txt"
    desert_windows: "__ECDF_BED_DIR__/ALL.bed.merged.5_to_10Mb.gz"
    desert_windows_unzip: "__ECDF_BED_DIR__/ALL.bed.merged.5_to_10Mb"
    below_thresh: "__ECDF_BED_DIR__/ALL.bed.merged.5_to_10Mb.prop_blw_thrhld"
    summary: "__ADMIXED_DIR__/summary.txt"

    # batch temp files
    vcf_batch: "__BASE_OUTPUT__/{directory}/vcfs/{id}.temp"
    match_counts_batch: "__NULL_DIR__/match_pct/{id}.temp"
    pvalue_table_batch: "__ADMIXED_DIR__/match_pct/{id}.temp"
    merge_split_batch: "__ECDF_BED_DIR__/ms_{id}.temp"
    ecdf_bed_batch: "__ECDF_BED_DIR__/eb_{id}.temp"

    # Output directory for simulations etc.
    base_output: "/Genomics/akeylab/abwolf/SimulatedDemographic/ABC_new/{model}"
    admixed_dir: "__BASE_OUTPUT__/n1_0.0_pi_test"
                # "__BASE_OUTPUT__/n1_0.03_mAfB_0.0_mBAf_0.0_mAfEu_0.0_mEuAf_0.0"
    # copy of this file is stored in admixed_dir
    config_copy: "__ADMIXED_DIR__/config_copy.yaml"
    # null is always stored in base/null:
    null_dir: "__BASE_OUTPUT__/null"

msprime:
    base_seed: 2
    base_params: "-r 216"
    # while the following are added to base_params, they are needed
    # in other parts of the workflow as well
    # Any duplicates with null params are overwritten (e.g. n1/n2)
    # "Tenn"
    # "Sriram"
    # "SplitPop"
    # "OutOfAfr"
    # "Tenn_nomod"
    # "Tenn_pulsed"
    model: "SplitPop"
    length: 10000000
    n1: 0.0
    n2: 0.0
    split_population_proportion: 0.0
    split_population_size: 1
    EUR: 1006
    ASN: 1008

    batch_size: 100

    null_simulations: 2000
    null_params: "-n 0.0 -d 0.0 \
                  --split-population-proportion 0.0 \
                  --split-population-size 1"

    admixed_simulations: 100
    admixed_params: " "

s_star:
    window_size: "50000"
    window_step_size: "10000"

match_pct:
    archaic:
        - "Neand1"
    modern:
        - "EUR"
        - "ASN"
    # Must be one of: `derived_in_archaic` or `derived_in_archaic_or_modern`
    informative_site_method: "derived_in_archaic"

    # Use windows from the database with informative site counts within RANGE
    # of the query windows informative site count to determine the null
    # distribution. If value is a float, it is multiplied by the count to
    # determine the range.
    informative_site_range: "0"

s_star_ecdf:
    sstarpvalue: "0.01"
    matchpvalue: "0.05"

window_thresh: 0.000316
